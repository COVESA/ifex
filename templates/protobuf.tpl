{# Protobuf template #}
{# (C) 2022 Robert Bosch GmbH #}
// protobuf code generated by protobuf.tpl
{# https://developers.google.com/protocol-buffers/docs/proto#services #}
syntax = "proto3";

{# Define Types #}
{# Not all vsc types can be represented as is in protobuf  #}
{% set typedefs = dict() %}
{# Add all type conversion  #}
{% set x=typedefs.__setitem__("int16", "int32") %}
{% set x=typedefs.__setitem__("uint8", "uint32") %}
{% set x=typedefs.__setitem__("boolean", "bool") %}

{% for s in item.children %}
package swdv.{{s.name}};

// Generic result message
message operation_result {
  bool result = 1;
}

   {% for n in s.namespaces %}
// VSC Namespace {{n.name}}
{# Typedefs and enum must be handled before structs, to convert types right #}
{# Limitation: for now we ignore namespaces #}
      {% for t in n.typedefs %}
// VSC Typedef {{t.name}}
        {# Typedef - Just using base type, but check if that one also needs to be expanded #}          
        {% if t.datatype in typedefs %}
          {% set type = typedefs[t.datatype] %}
        {% else %}
          {% set type = t.datatype %}
        {% endif %}
        {% set x=typedefs.__setitem__(t.name, type) %}

      {% endfor %}
      {% for t in n.enums %}
// VSC Enum {{t.name}}
enum {{t.name}} {
         {% for x in t.options %}
    {{ x.name }} = {{ loop.index - 1}};
         {% endfor %}
}

      {% endfor %}
      {% for x in n.structs %}
// VSC Struct {{x.name}}
          {# Cannot use dots in names #}
message {{x.name}} {
          {% for m in x.members %}
             {% if m.type in  typedefs %}
               {% set type = typedefs[m.type] %}
             {% else %}
               {% set type = m.type %}
             {% endif %}
  {{type|replace(".", "_")}} {{ m.name }} = {{ loop.index }};
          {% endfor %}
}

      {% endfor %}
      {% for x in n.methods %}
// VSC Method {{x.name}}
message {{ x.name }}_request {
         {% for x in x.in_arguments %}
           {% if x.type in  typedefs %}
             {% set type = typedefs[x.type] %}
           {% else %}
             {% set type = x.type %}
           {% endif %}
  {{type|replace(".", "_")}} {{ x.name }} = {{ loop.index }};
         {% endfor %}
}

message {{ x.name }}_response {
         {% for x in x.out_arguments %}
           {% if x.type in  typedefs %}
             {% set type = typedefs[x.type] %}
           {% else %}
             {% set type = x.type %}
           {% endif %}
  {{type|replace(".", "_")}} {{ x.name }} = {{ loop.index }};
         {% endfor %}
}

service {{ x.name }}_service {
  rpc {{ x.name }}({{ x.name }}_request) returns ({{ x.name }}_response);
}

      {% endfor %}

      {% for x in n.events %}
// VSC Event {{x.name}}
      {# Limitation: for now just creating a message #}
message {{ x.name }} {
         {% for x in x.in_arguments %}
           {% if x.type in  typedefs %}
             {% set type = typedefs[x.type] %}
           {% else %}
             {% set type = x.type %}
           {% endif %}
  {{type|replace(".", "_")}} {{ x.name }} = {{ loop.index }};
         {% endfor %}
}

      {% endfor %}

      {% for x in n.properties %}
// VSC Property {{x.name}}
message {{ x.name }}_value {
        {% if x.datatype in  typedefs %}
          {% set type = typedefs[x.datatype] %}
        {% else %}
          {% set type = x.datatype %}
        {% endif %}
  {{type|replace(".", "_")}} value = 1;
}

// To request value in read operation
message {{ x.name }}_request {}

        {# Example read write methods #}
service {{ x.name }} {
  rpc {{ x.name }}_read({{ x.name }}_request) returns ({{ x.name }}_value);
        {% if x.type == "actuator" %}
  rpc {{ x.name }}_write({{ x.name }}_value) returns (operation_result);
        {% endif %}
}

      {% endfor %}
   {% endfor %}

{% endfor %}

